@using System.Security.Claims
@using BlogServerSide.DataBase
@using Microsoft.Extensions.Configuration
@using MudBlazor
@using MudBlazor.Services
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>


            <AuthorizeView>
                <NotAuthorized>
                    
                    <MudBlazor.MudAppBar Color="Color.Primary" Fixed=false>
                           <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick=@MenuOpen/>
                            <MudSpacer />
                            <NavLink class="nav-link" href="Login" Match="NavLinkMatch.All">
                        Login
                    </NavLink>
                    </MudBlazor.MudAppBar>

                    
                </NotAuthorized>
                <Authorized>

                       <MudBlazor.MudAppBar Color="Color.Primary" Fixed=false>
                           <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick=@MenuOpen/>
                           <MudSpacer />
                            @FirstName  @LastName
                    <NavLink class="nav-link" href="Logout" Match="NavLinkMatch.All">
                    logout
                    </NavLink>
                   
                    </MudBlazor.MudAppBar>

                    
                </Authorized>
            </AuthorizeView>

            <MudLayout>
  <MudDrawer @bind-Open="@sideMenuOpen" Anchor="Anchor.Start" >
        <MudDrawerHeader>
        <MudText Typo="Typo.h6">Blog Menu</MudText>
    </MudDrawerHeader>
    <MudNavMenu>

             <AuthorizeView>
                <NotAuthorized>

        <MudNavLink Match="NavLinkMatch.All">Recents</MudNavLink>

        <MudNavGroup Title="Categories">
               @foreach (var cat in Categories)
                        {
                
            <MudNavLink Match="NavLinkMatch.All" Href="@($"Posts/{@cat.Slug}")">@cat.Title</MudNavLink>

                        }
        </MudNavGroup>

        </NotAuthorized>
                  <Authorized>

        <MudNavLink Match="NavLinkMatch.All">Recents</MudNavLink>
        <MudNavLink  Href="Profile" Match="NavLinkMatch.All">My Profile</MudNavLink>
        <MudNavGroup Title="Categories">
            @foreach (var cat in Categories)
                        {
                
            <MudNavLink Match="NavLinkMatch.All" Href="@($"Posts/{@cat.Slug}")">@cat.Title</MudNavLink>

                        }

        </MudNavGroup>

        </Authorized>

        

        </AuthorizeView>

          <AuthorizeView Roles="Admin, content-editor">
     
             <MudNavLink Href="CreatePost" Match="NavLinkMatch.All">Create Post</MudNavLink>
          
  
</AuthorizeView>

        <AuthorizeView Roles="Admin">
      <MudNavGroup Title="Admin">
             <MudNavLink Match="NavLinkMatch.All" Href="/UserAdminControl">Users</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All">Posts</MudNavLink>
        </MudNavGroup>
</AuthorizeView>
    </MudNavMenu>

    </MudDrawer>


    <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        @Body
    </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    public bool sideMenuOpen { get; set; } = true;

         public string? FirstName { get; set; }
        public string? LastName { get; set; }


        public List<Category> Categories { get; set; }       

        private ClaimsPrincipal AuthenticationStateProviderUser { get; set; }

        protected override async Task OnParametersSetAsync()
        {
            AuthenticationState authenticationState;
            authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            this.AuthenticationStateProviderUser = authenticationState.User;
            this.FirstName = this.AuthenticationStateProviderUser.FindFirst(c => c.Type == ClaimTypes.GivenName)?.Value;
            this.LastName = this.AuthenticationStateProviderUser.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;


            Categories = GetCategories();
        }
             private List<Category> GetCategories()
        {
            using (var context = new BlogContext(Configuration))
            {
              

                var categories = context.Categorys.ToList();

                return categories;
            } 
        }
    public void MenuOpen()
    {
        sideMenuOpen = !sideMenuOpen;
    }
}
